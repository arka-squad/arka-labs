üìÇ Norme commune Arka ‚Äî Formats de livrables Codex-ready (v1.2)
Objectif : garantir que tout livrable destin√© √† Codex soit accompagn√© d‚Äôun squelette standardis√© adapt√© au contexte (UI, API, Mobile, CLI, Microservice). Ces fichiers doivent √™tre plac√©s dans le module correspondant (/spec-integration.md ou √©quivalent).
Chaque squelette est con√ßu pour √™tre copi√©-coll√© puis rempli par l‚Äôagent responsable (UX, PMO, QA, Dev).

Bloc ‚ÄúDefinition-of-Ready‚Äù √† coller en t√™te de chaque ticket
definition_of_ready:
  contexte: "<pourquoi>"
  objectif: "<mesurable>"
  portee: "<ce qui est inclus / exclus>"

  contrats:
    api:
      routes:
        - method: POST
          path: /api/agent/:id/run
          request_schema: MessageInput.schema.json
          response_schema: { job_id: string }
          codes: [202,400,401,403,404,409]
          headers: ["Authorization: Bearer <jwt>", "X-Idempotency-Key: <uuid>"]
          idempotent: true
    ui:
      pages: ["/console/agents/:id", "/console/agents/:id/events"]
      actions_api_map:
        - action: "RunAgent"
          calls: ["POST /api/agent/:id/run"]

  donnees:
    migrations: ["sql/004_add_agent_runs.sql"]
    contraintes: ["runs.agent_id FK agents.id"]

  securite:
    rbac:
      viewer: ["GET /..."]
      operator: ["POST /agent/:id/run"]
      owner: ["*"]
    secrets: ["OPENAI_API_KEY"]
    hmac: true
    logs_trace_id: true

  budgets:
    api_latency_ms_p95: 500
    lcp_home_ms_p75: 2500   # si UI concern√©e
    tti_console_ms_p75: 2000 # si UI concern√©e
    a11y_level: "AA"

  tests_plan:
    - "Given JWT owner, When POST /run, Then 202 + job_id"
    - "Given viewer, When POST /run, Then 403"
    - "Given missing idempotency, When POST /run, Then 400"
    - "Given same X-Idempotency-Key, When POST twice, Then 202 once"

  evidences_attendues:
    - "logs_run_*.json (trace_id)"
    - "screenshots_parcours.png"
    - "report_tests_e2e.txt"
    - "lighthouse_*.pdf (si UI)"

  gate_DoR: true  # ‚ö†Ô∏è doit √™tre true pour d√©marrer


üéõÔ∏è Ent√™te Codex (rappel √† mettre juste sous la DoR)
codex_header:
  agent: Codex
  regles: "arka-meta/codex_rules/codex_rules_current.md"


üñºÔ∏è 1. Livrable UI / Frontend 
### 2.1 UI / Frontend
**Fichier obligatoire** : `spec-integration.md` (codex-ready)  √† la racine du module UI.  
But : passerelle standardis√©e entre maquettes/designs et Codex.

#### üì¶ Squelette `spec-integration.md`
# üß© Projet : <Nom du projet ou de la fonctionnalit√©>

## 1. Contexte & Objectifs
- **Source de la maquette** : <Figma / Sketch / URL ou description d√©taill√©e>
- **Objectifs principaux** : <Ex. page vitrine / espace utilisateur / module e-commerce>
- **Public cible / contexte d‚Äôusage** : <B2B, B2C, mobile, desktop, etc.>
- **Contraintes globales** : <d√©lais, performances, SEO, accessibilit√©, etc.>

---

## 2. Technologies & Environnement
- **Stack front-end** : <React, Next.js, Tailwind, etc.>
- **Outils & Version** : <Webpack/Vite, Node.js version, etc.>
- **Convention de nommage** : <BEM, tokens, etc.>
- **Gestionnaire de paquets** : <npm, yarn, pnpm>
- **Scripts utiles** :
  - `npm run dev` : <lancer l‚Äôenv. de dev>
  - `npm run build` : <compiler la version prod>
  - `npm test` : <tests unitaires>

---

## 3. Design System & Ressources
- **Couleurs** : <palette compl√®te>
- **Typographies** : <hi√©rarchie H1-H4, body>
- **Spacings** : <√©chelle px/rem>
- **Radius/shadows** : <valeurs par d√©faut>
- **Ic√¥nes/Images** : <liens>
- **Tokens globaux** : <table CSS/JS>

---

## 4. Responsive & Breakpoints
- **sm/md/lg/xl** : <valeurs>
- **Comportements attendus** : <navbar burger, grille adaptative‚Ä¶>

---

## 5. Accessibilit√© & SEO
- **ARIA roles** : <liste>
- **Contrastes min.** : 4.5:1
- **Navigation clavier** : OK
- **SEO** : <title, meta, heading structure>

---

## 6. Liste des Pages / Vues
1. **Page : Nom**
   - **URL** : `/example`
   - **Composants principaux** : <Navbar, Hero‚Ä¶>
   - **Donn√©es n√©cessaires** : <liste>
   - **Logique sp√©cifique** : <filtres, redirect>
*(r√©p√©ter pour chaque page)*

---

## 7. Composants d√©taill√©s
### 7.1 `<NomComposant>`
- **Role/Usage** : <description>
- **Props** :
  - `title: string`
  - `onClick: () => void`
- **√âtats** : <hover, focus, disabled>
- **Structure HTML indicative** :
```html
<div class="‚Ä¶">‚Ä¶</div>
Styles / Responsivit√© : <classes, breakpoints>

Animations : <fade, slide‚Ä¶>

Tests requis : unitaires + accessibilit√©

(r√©p√©ter pour chaque composant)

8. Interactions Globales & Flux
Navigation : <routes SPA / ancres>

Authentification : <login/logout>

√âtats globaux : <Redux/Context>

Services externes : <API REST, GraphQL>

9. Sc√©narios / Historique
US : ‚ÄúEn tant que <utilisateur>, je peux <action> afin de <objectif>.‚Äù

Cas limites : erreurs, edge-cases.

10. Tests & Validation
Unitaires : npm test

E2E : <si pr√©sent>

Manuels : responsive, navigateurs, devices.

11. T√¢ches & Priorit√©s
T√¢che	Priorit√©	Estimation	Responsable
Int√©grer Navbar	Haute	4h	<dev>
Int√©grer Footer	Moyenne	2h	<dev>

12. Ressources / Annexes
Liens : <Figma, API docs, captures>

Fichiers joints : logo.svg, icons.zip, variables.css

2.1.1 üìå TPL-UI-Integration ‚Äî Arka (v1.2)
But : contrat UI non-n√©gociable pour caler l‚Äôimpl√©mentation sur la r√©f√©rence UX.
R√©f√©rence visuelle : /ui-examples/ArkaLanding.js (tol√©rance ¬±4px sm/md/lg).

Tokens :

vbnet
Copier le code
bgBody:#0C1319
ringSoft:ring-slate-700/60
gradCTA: linear-gradient(135deg,#FAB652 0%,#F25636 35%,#E0026D 100%)
gradTextClass: bg-gradient-to-r from-amber-400 via-rose-500 to-fuchsia-600
Assets : logo blanc, logo radiant, arkabox-board.png, console-demo.gif, schema-agents.png.

Layout : grille Hero 12 cols, KPI grid 2/4, sections h-72, boutons gradient.

Composants attendus : Header, Hero, KPIs, ConsoleSection, TeamSection, CTA finale, Footer.

Responsive : sm pile verticale, md grille 12, lg alignement parfait (¬±4px).

Interactions : hover/focus CTA, GIF anim√© obligatoire.

Livrables : /app/page.tsx, captures avant/apr√®s vs r√©f√©rence.

Footer obligatoire dans le ticket : bloc CR-Codex.yaml.

---
(Codex-ready).

üåê 2. Livrable API REST
# üß© Projet : <Nom du service API>

## 1. Contexte & Objectifs
- **Domaine m√©tier** : <ex. e-commerce, CRM, analytics>
- **Objectif principal** : <exposer des donn√©es, g√©rer un workflow>
- **Contraintes** : <latence, s√©curit√©, volum√©trie>
- **Public cible** : <services internes, applications externes>

## 2. Stack & Environnement
- **Langage / Framework** : <Node.js + Express, Python + FastAPI>
- **Base de donn√©es** : <PostgreSQL, MongoDB>
- **Architecture** : <monolithique, microservice>
- **Outils** : <Docker, Swagger/OpenAPI, CI/CD>

## 3. Mod√©lisation & Endpoints
- **Entit√©s principales** : <User, Order>
- **Endpoints** : `GET /users`, `POST /orders` (d√©tails inputs/outputs)
- **Auth & S√©curit√©** : JWT, OAuth2, scopes

## 4. Tests & D√©ploiement
- **Tests** : unitaires, int√©gration, couverture ‚â• 80%
- **CI/CD** : pipelines, environnements (dev/staging/prod)
- **Monitoring** : logs, m√©triques, alertes


üì± 3. Livrable Application Mobile
# üß© Projet : <Nom de l‚Äôapplication mobile>

## 1. Contexte & Objectifs
- **Plateforme** : iOS, Android, cross-platform
- **But** : <suivi sportif, marketplace>
- **Contraintes** : offline, perf, guidelines stores

## 2. Stack & Outils
- **Framework** : React Native, Flutter, SwiftUI
- **Gestion √©tat** : Redux, Provider, Bloc
- **CI/CD** : Fastlane, GitHub Actions

## 3. Design & Modules
- **Design system** : couleurs, typographies
- **Navigation** : stack, tabs, drawer
- **Modules** : AuthService, ProductService

## 4. Tests & Distribution
- **Tests** : unitaires, UI, instrumentation
- **D√©ploiement** : App Store / Play Store, TestFlight


üíª 4. Livrable CLI / Script
# üß© Projet : <Nom du script CLI>

## 1. Contexte & Objectifs
- **But** : automatisation, d√©ploiement
- **Utilisateur cible** : dev, ops, end-user

## 2. Stack & Structure
- **Langage** : Python, Node.js, Go, Rust
- **Structure** : /commands, /utils, etc.
- **Packaging** : PyPI, npm, binaire standalone

## 3. Commandes & Usage
- `init` : cr√©e un projet
- `deploy` : d√©ploie un service

## 4. Tests & Distribution
- **Tests** : unitaires + int√©gration
- **CI** : GitHub Actions, GitLab CI
- **Release** : SemVer, changelog


üîÑ 5. Livrable Microservice + Worker
# üß© Projet : <Nom du microservice>

## 1. Contexte & Objectifs
- **R√¥le** : traitement de jobs async, emails, etc.
- **Int√©gration** : via broker (RabbitMQ, Kafka)
- **Contraintes** : idempotence, retries, volume √©lev√©

## 2. Stack & Architecture
- **Langage/Framework** : Python + Celery, Node.js + Bull
- **Broker** : RabbitMQ, Kafka, SQS
- **Containerisation** : Docker, Kubernetes

## 3. Flux & Messages
- **Producer** : service en amont
- **Worker** : consommation/traitement
- **Types de messages** : payload JSON + validations

## 4. Monitoring & D√©ploiement
- **Retry policy** : backoff, DLQ
- **Monitoring** : Prometheus, ELK
- **CI/CD** : build image, push registry


üîî R√®gles de gouvernance
Obligatoire : chaque agent choisit le squelette adapt√© au livrable produit.


Format unique : fichier spec-integration.md (ou √©quivalent selon contexte).


Validation QA : FAIL si le squelette n‚Äôest pas pr√©sent ou pas rempli.


Versioning : les specs sont trac√©es comme du code (YYYY-MM-DD).



6. Gouvernance
Codex = ex√©cuteur, non agent.


Le Owner (ou Mainteneur Git) est seul responsable de l‚Äôinjection dans le repo.


Les fiches agents renvoient toutes √† ce document (/arka-meta/docs/ARKA_CORE.md).



üìÇ Chemin cible propos√© :
 /arka-meta/docs/ARKA_CORE.md




‚ùì Faut-il d‚Äôautres squelettes ?
Oui, √† envisager √† moyen terme pour :


Projet Data / IA (pipelines ML, jeux de donn√©es, m√©triques)


Projet Infra / DevOps (Terraform, Helm charts, monitoring)


Projet S√©curit√© (politiques IAM, audits, tests de p√©n√©tration)


üëâ Proposition : d√©marrer avec ces 5 squelettes (UI, API REST, Mobile, CLI, Microservice). √âtendre ensuite si besoin.

‚ö° En clair : chaque agent doit livrer son artefact + squelette rempli.
 Cela cr√©e un langage commun Codex-ready, quel que soit le type de projet (front, back, mobile, infra).

