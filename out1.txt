'use client';

/* eslint-disable @next/next/no-img-element */
import {
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
  type KeyboardEvent as ReactKeyboardEvent,
} from 'react';
import { uiLog } from '../../../lib/ui-log';

export type AgentCardData = {
  id: string;
  title: string;
  role: string;
  image: string;
  summary: string;
  skills: string[];
  cta?: { label: string; href: string };
};

export type AgentsSliderProps = {
  items?: AgentCardData[];
  initialIndex?: number;
  onSlide?: (index: number) => void;
  onExpand?: (index: number) => void;
  onReset?: () => void;
};

export default function AgentsSlider({
  items = [] as AgentCardData[],
  initialIndex = 0,
  onSlide,
  onExpand,
  onReset,
}: AgentsSliderProps) {
  const railRef = useRef<HTMLDivElement>(null);

  // Use HTMLElement because <article> is HTMLArticleElement, not HTMLDivElement
  const cardRefs = useRef<HTMLElement[]>([]);

  const [active, setActive] = useState(initialIndex);

  const snapTo = useCallback((index: number, smooth = true, shouldFocus = true) => {
    const rail = railRef.current;
    if (!rail) return;
    const card = cardRefs.current[index];
    if (!card) return;
    const pl = parseFloat(getComputedStyle(rail).paddingLeft || '0');
    const target = card.offsetLeft - pl;
    const max = rail.scrollWidth - rail.clientWidth;
    rail.scrollTo({
      left: Math.max(0, Math.min(target, max)),
      behavior: smooth ? 'smooth' : 'auto',
    });
    if (shouldFocus) try { (card as HTMLElement).focus({ preventScroll: true } as any); } catch {}
  }, []);

  useEffect(() => {
    const rail = railRef.current;
    if (!rail) return;
    let raf = 0;
    const onScroll = () => {
      cancelAnimationFrame(raf);
      raf = requestAnimationFrame(() => {
        const pl = parseFloat(getComputedStyle(rail).paddingLeft || '0');
        const leftEdge = rail.scrollLeft + pl;
        let best = 0,
          bestDist = Infinity;
        cardRefs.current.forEach((el, i) => {
          if (!el) return;
          const dist = Math.abs(el.offsetLeft - leftEdge);
          if (dist < bestDist) {
            bestDist = dist;
            best = i;
          }
        });
        setActive(best);
      });
    };
    rail.addEventListener('scroll', onScroll, { passive: true });
    return () => {
      cancelAnimationFrame(raf);
      rail.removeEventListener('scroll', onScroll);
    };
  }, []);

  const handleKey = useCallback(
    (e: ReactKeyboardEvent) => {
      if (e.key === 'ArrowLeft') {
        e.preventDefault();
        snapTo(Math.max(0, active - 1), true, true);
      }
      if (e.key === 'ArrowRight') {
        e.preventDefault();
        snapTo(Math.min(items.length - 1, active + 1), true, true);
      }
      if (e.key === 'Home') {
        e.preventDefault();
        snapTo(0, false, true);
      }
      if (e.key === 'End') {
        e.preventDefault();
        snapTo(items.length - 1, false, true);
      }
      if (e.key === 'Escape') {
        e.preventDefault();
        uiLog('landing.slider.agents.reset', { count: active });
        onReset?.();
        snapTo(0, true, true);
      }
    },
    [active, items.length, onReset, snapTo],
  );

  useEffect(() => {
    const onResize = () => snapTo(active, false, false);
    window.addEventListener('resize', onResize);
    return () => {
      window.removeEventListener('resize', onResize);
    };
  }, [active, snapTo]);

  const first = useRef(true);
  useEffect(() => {
    if (first.current) {
      first.current = false;
      return;
    }
    uiLog('landing.slider.agents.slide', { index: active });
    onSlide?.(active);
  }, [active, onSlide]);

  // Align to initial index on mount without animation
  useEffect(() => {
    requestAnimationFrame(() => snapTo(initialIndex, false, false));
  }, [initialIndex, snapTo]);

  const data = useMemo<AgentCardData[]>(
    () =>
      items.length
        ? items
        : [
            {
              id: 'rh',
              title: 'Conseiller RH',
              role: 'RH',
              image: '/assets/hero/arkabox.png',
              summary: 'PrÃ©pare dossiers, contrats, onboarding.',
              skills: ['Dossiers RH', 'Contrats', 'Onboarding'],
            },
            {
              id: 'edu',
              title: 'Formateur',
              role: 'Ã‰DU',
              image: '/assets/hero/arkabox.png',
              summary: 'Parcours, Ã©valuations, ateliers.',
              skills: ['Parcours', 'Ã‰valuations', 'Ateliers'],
            },
            {
              id: 'qual',
              title: 'QualitÃ©',
              role: 'QUAL',
              image: '/assets/hero/arkabox.png',
              summary: 'Processus, audits, conformitÃ©.',
              skills: ['Processus', 'Audits', 'ConformitÃ©'],
            },
            {
              id: 'org',
              title: 'Organisation',
              role: 'ORG',
              image: '/assets/hero/arkabox.png',
              summary: 'Roadmaps, risques, arbitrages.',
              skills: ['Roadmaps', 'Risques', 'Arbitrages'],
            },
            {
              id: 'support',
              title: 'Support',
              role: 'SUP',
              image: '/assets/hero/arkabox.png',
              summary: 'Tickets, rÃ©ponses, satisfaction.',
              skills: ['Tickets', 'RÃ©ponses', 'Satisfaction'],
            },
            {
              id: 'marketing',
              title: 'Marketing',
              role: 'MKT',
              image: '/assets/hero/arkabox.png',
              summary: 'Campagnes, contenus, analytics.',
              skills: ['Campagnes', 'Contenus', 'Analytics'],
            },
          ],
    [items],
  );

  const atStart = active === 0;
  const atEnd = active === Math.max(0, data.length - 1);

  const railPad = 'max(calc((100vw - 90rem) / 2 + 24px), 16px)';

  return (
    <section
      id="agents"
      aria-labelledby="agents-title"
      className="py-16"
      onKeyDown={handleKey}
    >
      <div className="mx-auto max-w-[1440px] px-6">
        <header className="text-center max-w-3xl mx-auto">
          <h2 id="agents-title" className="text-3xl md:text-4xl font-semibold" style={{ color: 'var(--site-text)' }}>Nos agents experts</h2>
          <p className="mt-2" style={{ color: 'var(--site-muted)' }}>Une squad oÃ¹ chaque rÃ´le est clair, et oÃ¹ chacun connaÃ®t ses collÃ¨gues.</p>
        </header>
        <header className="flex items-end justify-between gap-4">
          <div>
            <h2
              id="agents-title"
              className="text-3xl md:text-4xl font-semibold"
              style={{ color: 'var(--site-text)' }}
            >
              Nos agents experts
            </h2>
            <p className="mt-2" style={{ color: 'var(--site-muted)' }}>
              Une squad oÃ¹ chaque rÃ´le est clairâ€¦
            </p>
          </div>
          <div className="hidden md:flex items-center gap-2">
            {active > 0 && (
              <button
                aria-controls="agents-rail"
                aria-label="Revenir au dÃ©but"
                onClick={() => {
                  uiLog('landing.slider.agents.reset', { count: active });
                  onReset?.();
                  snapTo(0);
                }}
                className="h-11 w-11 rounded-full bg-white ring-1 ring-black/10"
              >
                â†©
