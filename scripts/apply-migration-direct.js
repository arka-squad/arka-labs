/**
 * Script de migration direct avec DATABASE_URL
 */

const postgres = require('postgres');

async function applyMigration() {
  console.log('üöÄ Migration normalisation BDD - D√©marrage direct...');

  // Connexion directe avec DATABASE_URL
  const databaseUrl = process.env.DATABASE_URL || "postgresql://neondb_owner:npg_NgHpnVad4xP9@ep-tiny-king-a292mq2e-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require";

  if (!databaseUrl) {
    console.error('‚ùå DATABASE_URL manquant');
    process.exit(1);
  }

  const sql = postgres(databaseUrl);

  try {
    console.log('üîó Connexion BDD...');

    // Test connexion
    const testConn = await sql`SELECT 1`;
    console.log('‚úÖ Connexion r√©ussie');

    // √âTAPE 1: V√©rifier structure actuelle
    console.log('\nüìä √âtat actuel BDD...');

    try {
      const clientsCols = await sql`
        SELECT column_name
        FROM information_schema.columns
        WHERE table_name = 'clients'
        ORDER BY column_name
      `;
      console.log('üè¢ Colonnes clients actuelles:', clientsCols.map(c => c.column_name).join(', '));
    } catch (e) {
      console.log('‚ö†Ô∏è Table clients introuvable');
    }

    try {
      const agentsCols = await sql`
        SELECT column_name
        FROM information_schema.columns
        WHERE table_name = 'agents'
        ORDER BY column_name
      `;
      console.log('ü§ñ Colonnes agents actuelles:', agentsCols.map(c => c.column_name).join(', '));
    } catch (e) {
      console.log('‚ö†Ô∏è Table agents introuvable');
    }

    // √âTAPE 2: Appliquer migrations une par une
    console.log('\nüîß Application migration normalisation...');

    const migrations = [
      // 1. Clients nom ‚Üí name
      {
        name: 'clients.nom ‚Üí name',
        sql: `ALTER TABLE clients RENAME COLUMN nom TO name`,
        critical: true
      },
      // 2. Clients statut ‚Üí status
      {
        name: 'clients.statut ‚Üí status',
        sql: `ALTER TABLE clients RENAME COLUMN statut TO status`,
        critical: true
      },
      // 3. Clients secteur ‚Üí sector (si existe)
      {
        name: 'clients.secteur ‚Üí sector',
        sql: `ALTER TABLE clients RENAME COLUMN secteur TO sector`,
        critical: false
      },
      // 4. Clients taille ‚Üí size (si existe)
      {
        name: 'clients.taille ‚Üí size',
        sql: `ALTER TABLE clients RENAME COLUMN taille TO size`,
        critical: false
      },
      // 5. Agents domaine ‚Üí domain
      {
        name: 'agents.domaine ‚Üí domain',
        sql: `ALTER TABLE agents RENAME COLUMN domaine TO domain`,
        critical: false
      },
      // 6. Index clients
      {
        name: 'Index clients name',
        sql: `CREATE INDEX IF NOT EXISTS idx_clients_name ON clients(name)`,
        critical: false
      },
      // 7. Contrainte status
      {
        name: 'Contrainte status',
        sql: `ALTER TABLE clients ADD CONSTRAINT clients_status_check CHECK (status IN ('active', 'inactive', 'archived'))`,
        critical: false
      }
    ];

    for (let i = 0; i < migrations.length; i++) {
      const migration = migrations[i];
      console.log(`\n[${i + 1}/${migrations.length}] ${migration.name}...`);

      try {
        await sql.unsafe(migration.sql);
        console.log('‚úÖ Succ√®s');
      } catch (error) {
        if (migration.critical) {
          console.log('‚ùå ERREUR CRITIQUE:', error.message);
        } else {
          console.log('‚ö†Ô∏è Warning (ignor√©):', error.message);
        }
      }
    }

    // √âTAPE 3: Validation post-migration
    console.log('\nüß™ Tests validation post-migration...');

    try {
      const clients = await sql`SELECT name, status FROM clients LIMIT 1`;
      console.log('‚úÖ Test clients normalis√©s: OK');
    } catch (error) {
      console.log('‚ùå Test clients:', error.message);
    }

    try {
      const agents = await sql`SELECT name, domain FROM agents LIMIT 1`;
      console.log('‚úÖ Test agents normalis√©s: OK');
    } catch (error) {
      console.log('‚ùå Test agents:', error.message);
    }

    // √âTAPE 4: √âtat final
    console.log('\nüìä √âtat final BDD...');
    try {
      const finalClientsCols = await sql`
        SELECT column_name
        FROM information_schema.columns
        WHERE table_name = 'clients'
        ORDER BY column_name
      `;
      console.log('üè¢ Colonnes clients finales:', finalClientsCols.map(c => c.column_name).join(', '));
    } catch (e) {
      console.log('‚ö†Ô∏è Erreur lecture colonnes finales');
    }

    console.log('\nüéâ MIGRATION TERMIN√âE AVEC SUCC√àS !');
    console.log('‚úÖ Base de donn√©es normalis√©e sch√©ma anglais uniforme');

  } catch (error) {
    console.error('‚ùå Erreur fatale migration:', error);
    process.exit(1);
  } finally {
    await sql.end();
    console.log('üîå Connexion BDD ferm√©e');
  }
}

applyMigration();