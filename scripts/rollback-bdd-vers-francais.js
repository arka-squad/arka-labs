/**
 * Rollback BDD vers fran√ßais pour correspondre au code rollback√©
 */

const { Client } = require('pg');

async function rollbackDBToFrench() {
  console.log('üîÑ Rollback BDD vers fran√ßais...');

  const client = new Client({
    connectionString: process.env.DATABASE_URL || "postgresql://neondb_owner:npg_NgHpnVad4xP9@ep-tiny-king-a292mq2e-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require"
  });

  try {
    await client.connect();
    console.log('‚úÖ Connexion BDD r√©ussie');

    const rollbackMigrations = [
      // CLIENTS: anglais ‚Üí fran√ßais
      {
        name: 'clients.name ‚Üí nom',
        sql: `ALTER TABLE clients RENAME COLUMN name TO nom`,
        critical: true
      },
      {
        name: 'clients.status ‚Üí statut',
        sql: `ALTER TABLE clients RENAME COLUMN status TO statut`,
        critical: true
      },
      {
        name: 'clients.sector ‚Üí secteur',
        sql: `ALTER TABLE clients RENAME COLUMN sector TO secteur`,
        critical: true
      },
      {
        name: 'clients.size ‚Üí taille',
        sql: `ALTER TABLE clients RENAME COLUMN size TO taille`,
        critical: true
      },
      {
        name: 'clients.specific_context ‚Üí contexte_specifique',
        sql: `ALTER TABLE clients RENAME COLUMN specific_context TO contexte_specifique`,
        critical: true
      },
      // AGENTS: anglais ‚Üí fran√ßais
      {
        name: 'agents.domain ‚Üí domaine',
        sql: `ALTER TABLE agents RENAME COLUMN domain TO domaine`,
        critical: false
      },
      {
        name: 'agent_templates.domain ‚Üí domaine',
        sql: `ALTER TABLE agent_templates RENAME COLUMN domain TO domaine`,
        critical: false
      }
    ];

    console.log(`\nüöÄ ${rollbackMigrations.length} colonnes √† rollback...`);

    for (let i = 0; i < rollbackMigrations.length; i++) {
      const migration = rollbackMigrations[i];
      console.log(`\n[${i + 1}/${rollbackMigrations.length}] ${migration.name}...`);

      try {
        await client.query(migration.sql);
        console.log('‚úÖ Succ√®s');
      } catch (error) {
        if (migration.critical) {
          console.log('‚ùå ERREUR CRITIQUE:', error.message);
        } else {
          console.log('‚ö†Ô∏è Warning (ignor√©):', error.message);
        }
      }
    }

    // Test validation finale
    console.log('\nüß™ Tests validation rollback...');

    try {
      const clients = await client.query('SELECT nom, secteur, taille, statut FROM clients LIMIT 1');
      console.log('‚úÖ Test clients (nom, secteur, taille, statut): OK');
      if (clients.rows.length > 0) {
        console.log('üìù Exemple:', clients.rows[0]);
      }
    } catch (error) {
      console.log('‚ùå Test clients √©chou√©:', error.message);
    }

    try {
      const agents = await client.query('SELECT domaine FROM agents LIMIT 1');
      console.log('‚úÖ Test agents (domaine): OK');
    } catch (error) {
      console.log('‚ùå Test agents √©chou√©:', error.message);
    }

    console.log('\nüéâ ROLLBACK BDD VERS FRAN√áAIS TERMIN√â !');
    console.log('‚úÖ Base de donn√©es align√©e avec code fran√ßais');

  } catch (error) {
    console.error('‚ùå Erreur rollback BDD:', error.message);
  } finally {
    await client.end();
    console.log('üîå Connexion ferm√©e');
  }
}

rollbackDBToFrench();