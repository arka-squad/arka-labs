// Cr√©er la table agents manquante
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: 'postgresql://neondb_owner:npg_NgHpnVad4xP9@ep-tiny-king-a292mq2e-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require'
});

async function createAgentsTable() {
  console.log('üöÄ Cr√©ation table agents...');

  try {
    // Cr√©er la table agents
    await pool.query(`
      CREATE TABLE IF NOT EXISTS agents (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(200) NOT NULL,
        role VARCHAR(100),
        domaine VARCHAR(100),
        version VARCHAR(50),
        status VARCHAR(20) DEFAULT 'active',
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW(),
        deleted_at TIMESTAMPTZ
      );
    `);
    console.log('‚úÖ Table agents cr√©√©e');

    // Ins√©rer quelques agents de test
    await pool.query(`
      INSERT INTO agents (name, role, domaine, version, status) VALUES
      ('Agent Web Dev', 'developer', 'web', 'v1.0', 'active'),
      ('Agent Mobile', 'developer', 'mobile', 'v1.0', 'active'),
      ('Agent Data', 'analyst', 'data', 'v1.0', 'active'),
      ('Agent DevOps', 'devops', 'infrastructure', 'v1.0', 'active')
      ON CONFLICT (id) DO NOTHING;
    `);
    console.log('‚úÖ Agents de test ajout√©s');

    // V√©rifier
    const result = await pool.query('SELECT COUNT(*) FROM agents');
    console.log(`üìä ${result.rows[0].count} agents en base`);

    console.log('üéâ Table agents cr√©√©e avec succ√®s');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await pool.end();
  }
}

createAgentsTable();